version: '3.8'

services:
  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: soundsync-frontend:latest
    container_name: soundsync-frontend
    ports:
      - "3000:80"
    depends_on:
      - api
    restart: unless-stopped
    env_file:
      - ./frontend/.env.production
    networks:
      - soundsync-network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend API
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: soundsync-api:latest
    container_name: soundsync-api
    ports:
      - "5000:5000"
    depends_on:
      - mongodb
      - redis
    restart: unless-stopped
    env_file:
      - ./backend/.env.production
    networks:
      - soundsync-network
    volumes:
      - ./backend/logs:/app/logs
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/soundsync
      - REDIS_URL=redis://redis:6379
      - PORT=5000
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:5000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Web Socket Server
  websocket:
    build:
      context: ./websocket
      dockerfile: Dockerfile
    image: soundsync-websocket:latest
    container_name: soundsync-websocket
    ports:
      - "5001:5001"
    depends_on:
      - mongodb
      - redis
    restart: unless-stopped
    env_file:
      - ./websocket/.env.production
    networks:
      - soundsync-network
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/soundsync
      - REDIS_URL=redis://redis:6379
      - PORT=5001
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: soundsync-mongodb
    ports:
      - "27017:27017"
    networks:
      - soundsync-network
    volumes:
      - mongodb-data:/data/db
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
    command: ["--auth", "--bind_ip_all"]
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Redis for caching and real-time messaging
  redis:
    image: redis:7.0-alpine
    container_name: soundsync-redis
    ports:
      - "6379:6379"
    networks:
      - soundsync-network
    volumes:
      - redis-data:/data
    command: redis-server --requirepass ${REDIS_PASSWORD}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx for SSL termination and load balancing
  nginx:
    image: nginx:1.25-alpine
    container_name: soundsync-nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - api
      - websocket
    networks:
      - soundsync-network
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: soundsync-certbot
    volumes:
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    depends_on:
      - nginx
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  # Analytics and Monitoring
  prometheus:
    image: prom/prometheus
    container_name: soundsync-prometheus
    ports:
      - "9090:9090"
    networks:
      - soundsync-network
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    restart: unless-stopped

  grafana:
    image: grafana/grafana
    container_name: soundsync-grafana
    ports:
      - "3001:3000"
    networks:
      - soundsync-network
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false

  # Log aggregation with ELK stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: soundsync-elasticsearch
    networks:
      - soundsync-network
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    restart: unless-stopped

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: soundsync-logstash
    networks:
      - soundsync-network
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    depends_on:
      - elasticsearch
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: soundsync-kibana
    ports:
      - "5601:5601"
    networks:
      - soundsync-network
    depends_on:
      - elasticsearch
    restart: unless-stopped

networks:
  soundsync-network:
    driver: bridge

volumes:
  mongodb-data:
  redis-data:
  prometheus-data:
  grafana-data:
  elasticsearch-data:
