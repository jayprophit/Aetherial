// infrastructure/cloudformation/soundsync-hub-infrastructure.yaml

AWSTemplateFormatVersion: '2010-09-09'
Description: 'SoundSync Hub - Multi-cloud production infrastructure'

Parameters:
  Environment:
    Description: Deployment environment
    Type: String
    Default: Production
    AllowedValues:
      - Development
      - Staging
      - Production

  DomainName:
    Description: Domain name for the application
    Type: String
    Default: soundsync.io

  CertificateArn:
    Description: ARN of the SSL certificate for CloudFront
    Type: String

  MongoAtlasUri:
    Description: MongoDB Atlas connection URI
    Type: String
    NoEcho: true

  RedisPassword:
    Description: Redis password
    Type: String
    NoEcho: true

Mappings:
  EnvironmentMap:
    Development:
      MinContainers: 1
      MaxContainers: 2
      APIInstanceType: t3.small
      WebsocketInstanceType: t3.small
      RedisCacheSize: cache.t3.small
      ElasticSearchInstanceType: t3.small.elasticsearch
      BackupRetentionPeriod: 7
    Staging:
      MinContainers: 2
      MaxContainers: 4
      APIInstanceType: t3.medium
      WebsocketInstanceType: t3.medium
      RedisCacheSize: cache.t3.medium
      ElasticSearchInstanceType: t3.medium.elasticsearch
      BackupRetentionPeriod: 14
    Production:
      MinContainers: 3
      MaxContainers: 10
      APIInstanceType: t3.large
      WebsocketInstanceType: t3.large
      RedisCacheSize: cache.m5.large
      ElasticSearchInstanceType: m5.large.elasticsearch
      BackupRetentionPeriod: 30

Resources:
  # VPC and Network Configuration
  SoundSyncVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub SoundSync-${Environment}-VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SoundSyncVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub SoundSync-${Environment}-PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SoundSyncVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub SoundSync-${Environment}-PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SoundSyncVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub SoundSync-${Environment}-PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SoundSyncVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub SoundSync-${Environment}-PrivateSubnet2

  # Internet Gateway and Route Tables
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub SoundSync-${Environment}-IGW

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref SoundSyncVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SoundSyncVPC
      Tags:
        - Key: Name
          Value: !Sub SoundSync-${Environment}-PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # NAT Gateway for Private Subnets
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachment
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub SoundSync-${Environment}-NatGateway

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SoundSyncVPC
      Tags:
        - Key: Name
          Value: !Sub SoundSync-${Environment}-PrivateRouteTable

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref SoundSyncVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  APISecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for API ECS tasks
      VpcId: !Ref SoundSyncVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          SourceSecurityGroupId: !Ref ALBSecurityGroup

  WebSocketSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for WebSocket ECS tasks
      VpcId: !Ref SoundSyncVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5001
          ToPort: 5001
          SourceSecurityGroupId: !Ref ALBSecurityGroup

  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Redis cluster
      VpcId: !Ref SoundSyncVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref APISecurityGroup
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref WebSocketSecurityGroup

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub SoundSync-${Environment}-Cluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1

  # ECR Repositories
  FrontendRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub soundsync-${Environment}-frontend
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep only the last 10 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  APIRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub soundsync-${Environment}-api
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep only the last 10 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  WebSocketRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub soundsync-${Environment}-websocket
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep only the last 10 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  # Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub SoundSync-${Environment}-ALB
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: application
      IpAddressType: ipv4

  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01
      Certificates:
        - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FrontendTargetGroup

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: '443'
            Host: '#{host}'
            Path: '/#{path}'
            Query: '#{query}'
            StatusCode: HTTP_301

  # Target Groups
  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub SoundSync-${Environment}-Frontend-TG
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref SoundSyncVPC
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3

  APITargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub SoundSync-${Environment}-API-TG
      Port: 5000
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref SoundSyncVPC
      HealthCheckPath: /api/v1/health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3

  WebSocketTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub SoundSync-${Environment}-WebSocket-TG
      Port: 5001
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref SoundSyncVPC
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3

  # ALB Rules
  APIListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HTTPSListener
      Priority: 10
      Conditions:
        - Field: path-pattern
          Values:
            - /api/*
      Actions:
        - Type: forward
          TargetGroupArn: !Ref APITargetGroup

  WebSocketListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HTTPSListener
      Priority: 20
      Conditions:
        - Field: path-pattern
          Values:
            - /ws/*
            - /socket.io/*
      Actions:
        - Type: forward
          TargetGroupArn: !Ref WebSocketTargetGroup

  # IAM Roles
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  # Task Definitions
  FrontendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub soundsync-${Environment}-frontend
      Cpu: '512'
      Memory: '1024'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: frontend
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${FrontendRepository}:latest
          Essential: true
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
          Environment:
            - Name: NODE_ENV
              Value: !Ref Environment
            - Name: API_URL
              Value: !Sub https://${DomainName}/api
            - Name: WS_URL
              Value: !Sub wss://${DomainName}/ws
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub /ecs/soundsync-${Environment}-frontend
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  APITaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub soundsync-${Environment}-api
      Cpu: '1024'
      Memory: '2048'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: api
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${APIRepository}:latest
          Essential: true
          PortMappings:
            - ContainerPort: 5000
              HostPort: 5000
              Protocol: tcp
          Environment:
            - Name: NODE_ENV
              Value: !Ref Environment
            - Name: PORT
              Value: '5000'
            - Name: MONGODB_URI
              Value: !Ref MongoAtlasUri
            - Name: REDIS_URL
              Value: !Sub redis://:${RedisPassword}@${RedisCluster.RedisEndpoint.Address}:${RedisCluster.RedisEndpoint.Port}
            - Name: JWT_SECRET
              Value: !Sub '{{resolve:secretsmanager:SoundSync-${Environment}-Secrets:SecretString:JWTSecret}}'
            - Name: API_URL
              Value: !Sub https://${DomainName}/api
            - Name: CLIENT_URL
              Value: !Sub https://${DomainName}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub /ecs/soundsync-${Environment}-api
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  WebSocketTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub soundsync-${Environment}-websocket
      Cpu: '1024'
      Memory: '2048'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: websocket
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${WebSocketRepository}:latest
          Essential: true
          PortMappings:
            - ContainerPort: 5001
              HostPort: 5001
              Protocol: tcp
          Environment:
            - Name: NODE_ENV
              Value: !Ref Environment
            - Name: PORT
              Value: '5001'
            - Name: MONGODB_URI
              Value: !Ref MongoAtlasUri
            - Name: REDIS_URL
              Value: !Sub redis://:${RedisPassword}@${RedisCluster.RedisEndpoint.Address}:${RedisCluster.RedisEndpoint.Port}
            - Name: JWT_SECRET
              Value: !Sub '{{resolve:secretsmanager:SoundSync-${Environment}-Secrets:SecretString:JWTSecret}}'
            - Name: API_URL
              Value: !Sub https://${DomainName}/api
            - Name: CLIENT_URL
              Value: !Sub https://${DomainName}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub /ecs/soundsync-${Environment}-websocket
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  # ECS Services
  FrontendService:
    Type: AWS::ECS::Service
    DependsOn: HTTPSListener
    Properties:
      ServiceName: !Sub soundsync-${Environment}-frontend
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref FrontendTaskDefinition
      LaunchType: FARGATE
      DesiredCount: !FindInMap [EnvironmentMap, !Ref Environment, MinContainers]
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt ALBSecurityGroup.GroupId
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
      LoadBalancers:
        - ContainerName: frontend
          ContainerPort: 80
          TargetGroupArn: !Ref FrontendTargetGroup

  APIService:
    Type: AWS::ECS::Service
    DependsOn: HTTPSListener
    Properties:
      ServiceName: !Sub soundsync-${Environment}-api
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref APITaskDefinition
      LaunchType: FARGATE
      DesiredCount: !FindInMap [EnvironmentMap, !Ref Environment, MinContainers]
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt APISecurityGroup.GroupId
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
      LoadBalancers:
        - ContainerName: api
          ContainerPort: 5000
          TargetGroupArn: !Ref APITargetGroup

  WebSocketService:
    Type: AWS::ECS::Service
    DependsOn: HTTPSListener
    Properties:
      ServiceName: !Sub soundsync-${Environment}-websocket
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref WebSocketTaskDefinition
      LaunchType: FARGATE
      DesiredCount: !FindInMap [EnvironmentMap, !Ref Environment, MinContainers]
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt WebSocketSecurityGroup.GroupId
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
      LoadBalancers:
        - ContainerName: websocket
          ContainerPort: 5001
          TargetGroupArn: !Ref WebSocketTargetGroup

  # Auto Scaling
  FrontendAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !FindInMap [EnvironmentMap, !Ref Environment, MaxContainers]
      MinCapacity: !FindInMap [EnvironmentMap, !Ref Environment, MinContainers]
      ResourceId: !Sub service/${ECSCluster}/${FrontendService.Name}
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService

  APIAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !FindInMap [EnvironmentMap, !Ref Environment, MaxContainers]
      MinCapacity: !FindInMap [EnvironmentMap, !Ref Environment, MinContainers]
      ResourceId: !Sub service/${ECSCluster}/${APIService.Name}
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService

  WebSocketAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !FindInMap [EnvironmentMap, !Ref Environment, MaxContainers]
      MinCapacity: !FindInMap [EnvironmentMap, !Ref Environment, MinContainers]
      ResourceId: !Sub service/${ECSCluster}/${WebSocketService.Name}
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService

  FrontendScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${FrontendService.Name}-cpu-scaling
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref FrontendAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60

  APIScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${APIService.Name}-cpu-scaling
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref APIAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60

  WebSocketScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${WebSocketService.Name}-cpu-scaling
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref WebSocketAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60

  # Redis ElastiCache Cluster
  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Subnet group for SoundSync Redis
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  RedisCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      CacheNodeType: !FindInMap [EnvironmentMap, !Ref Environment, RedisCacheSize]
      Engine: redis
      NumCacheNodes: 1
      CacheSubnetGroupName: !Ref RedisSubnetGroup
      VpcSecurityGroupIds:
        - !Ref RedisSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub SoundSync-${Environment}-Redis

  # CloudWatch Log Groups
  FrontendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/soundsync-${Environment}-frontend
      RetentionInDays: !FindInMap [EnvironmentMap, !Ref Environment, BackupRetentionPeriod]

  APILogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/soundsync-${Environment}-api
      RetentionInDays: !FindInMap [EnvironmentMap, !Ref Environment, BackupRetentionPeriod]

  WebSocketLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/soundsync-${Environment}-websocket
      RetentionInDays: !FindInMap [EnvironmentMap, !Ref Environment, BackupRetentionPeriod]

  # Route 53 DNS Records
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub ${DomainName}.
      Name: !Sub ${DomainName}.
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApplicationLoadBalancer.DNSName
        HostedZoneId: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID

  APIGatewayRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub ${DomainName}.
      Name: !Sub api.${DomainName}.
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApplicationLoadBalancer.DNSName
        HostedZoneId: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID

  # S3 Bucket for Static Assets
  StaticAssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub soundsync-${Environment}-static-assets
      AccessControl: Private
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
            AllowedOrigins:
              - !Sub https://${DomainName}
            MaxAge: 3600

  StaticAssetsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticAssetsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action: 's3:GetObject'
            Resource: !Sub arn:aws:s3:::${StaticAssetsBucket}/*'

  # CloudFront Distribution for Static Assets
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub Access Identity for SoundSync ${Environment} Static Assets

  StaticAssetsCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt StaticAssetsBucket.DomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        Enabled: true
        DefaultRootObject: index.html
        HttpVersion: http2
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2019
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          Compress: true
          DefaultTTL: 86400
        Aliases:
          - !Sub assets.${DomainName}

  AssetsRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub ${DomainName}.
      Name: !Sub assets.${DomainName}.
      Type: A
      AliasTarget:
        DNSName: !GetAtt StaticAssetsCloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront hosted zone ID

Outputs:
  VpcId:
    Description: The ID of the VPC
    Value: !Ref SoundSyncVPC
    Export:
      Name: !Sub ${AWS::StackName}-VpcId

  PublicSubnet1:
    Description: The ID of the first public subnet
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1

  PublicSubnet2:
    Description: The ID of the second public subnet
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2

  PrivateSubnet1:
    Description: The ID of the first private subnet
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1

  PrivateSubnet2:
    Description: The ID of the second private subnet
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2

  ECSCluster:
    Description: The ARN of the ECS cluster
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${AWS::StackName}-ECSCluster

  ApplicationLoadBalancer:
    Description: The URL of the ALB
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub ${AWS::StackName}-ALB

  RedisEndpoint:
    Description: The endpoint of the Redis cluster
    Value: !GetAtt RedisCluster.RedisEndpoint.Address
    Export:
      Name: !Sub ${AWS::StackName}-RedisEndpoint

  StaticAssetsURL:
    Description: CloudFront URL for static assets
    Value: !GetAtt StaticAssetsCloudFrontDistribution.DomainName
    Export:
      Name: !Sub ${AWS::StackName}-StaticAssetsURL

  APIEndpoint:
    Description: API Endpoint URL
    Value: !Sub https://api.${DomainName}
    Export:
      Name: !Sub ${AWS::StackName}-APIEndpoint

  WebsiteURL:
    Description: Website URL
    Value: !Sub https://${DomainName}
    Export:
      Name: !Sub ${AWS::StackName}-WebsiteURL