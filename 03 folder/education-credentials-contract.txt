// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/access/AccessControl.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

contract EducationalCredentials is ERC721, ERC721URIStorage, Pausable, AccessControl {
    using Counters for Counters.Counter;

    bytes32 public constant ISSUER_ROLE = keccak256("ISSUER_ROLE");
    bytes32 public constant VERIFIER_ROLE = keccak256("VERIFIER_ROLE");
    
    Counters.Counter private _tokenIdCounter;
    
    // Credential structure
    struct Credential {
        string credentialType;    // e.g., "Degree", "Certificate", "Badge"
        string institution;       // Issuing institution
        uint256 issueDate;
        uint256 expiryDate;      // 0 for non-expiring credentials
        string subjectArea;
        string grade;            // Optional grade or score
        bool revoked;
        string[] skills;         // Associated skills
        mapping(address => bool) verifications;  // Verifier endorsements
    }
    
    // Mapping from token ID to Credential
    mapping(uint256 => Credential) public credentials;
    
    // Events
    event CredentialIssued(
        uint256 indexed tokenId,
        address indexed recipient,
        string credentialType,
        string institution
    );
    
    event CredentialRevoked(uint256 indexed tokenId);
    event CredentialVerified(uint256 indexed tokenId, address indexed verifier);
    event CredentialExpired(uint256 indexed tokenId);
    
    constructor() ERC721("Educational Credentials", "EDU") {
        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);
        _grantRole(ISSUER_ROLE, msg.sender);
        _grantRole(VERIFIER_ROLE, msg.sender);
    }

    function issueCredential(
        address recipient,
        string memory credentialType,
        string memory institution,
        uint256 expiryDate,
        string memory subjectArea,
        string memory grade,
        string[] memory skills,
        string memory uri
    ) public onlyRole(ISSUER_ROLE) returns (uint256) {
        require(recipient != address(0), "Invalid recipient");
        
        uint256 tokenId = _tokenIdCounter.current();
        _tokenIdCounter.increment();
        _safeMint(recipient, tokenId);
        _setTokenURI(tokenId, uri);
        
        Credential storage newCredential = credentials[tokenId];
        newCredential.credentialType = credentialType;
        newCredential.institution = institution;
        newCredential.issueDate = block.timestamp;
        newCredential.expiryDate = expiryDate;
        newCredential.subjectArea = subjectArea;
        newCredential.grade = grade;
        newCredential.revoked = false;
        newCredential.skills = skills;
        
        emit CredentialVerified(tokenId, msg.sender);
    }

    function revokeCredential(uint256 tokenId) 
        public 
        onlyRole(ISSUER_ROLE) 
    {
        require(_exists(tokenId), "Credential does not exist");
        require(!credentials[tokenId].revoked, "Credential already revoked");
        
        credentials[tokenId].revoked = true;
        emit CredentialRevoked(tokenId);
    }

    function addSkills(uint256 tokenId, string[] memory newSkills) 
        public 
        onlyRole(ISSUER_ROLE) 
    {
        require(_exists(tokenId), "Credential does not exist");
        require(!credentials[tokenId].revoked, "Credential has been revoked");
        
        for (uint i = 0; i < newSkills.length; i++) {
            credentials[tokenId].skills.push(newSkills[i]);
        }
    }

    function getCredentialDetails(uint256 tokenId) 
        public 
        view 
        returns (
            string memory credentialType,
            string memory institution,
            uint256 issueDate,
            uint256 expiryDate,
            string memory subjectArea,
            string memory grade,
            bool revoked,
            string[] memory skills
        ) 
    {
        require(_exists(tokenId), "Credential does not exist");
        
        Credential storage credential = credentials[tokenId];
        return (
            credential.credentialType,
            credential.institution,
            credential.issueDate,
            credential.expiryDate,
            credential.subjectArea,
            credential.grade,
            credential.revoked,
            credential.skills
        );
    }

    function isVerifiedBy(uint256 tokenId, address verifier) 
        public 
        view 
        returns (bool) 
    {
        require(_exists(tokenId), "Credential does not exist");
        return credentials[tokenId].verifications[verifier];
    }

    function getVerificationCount(uint256 tokenId) 
        public 
        view 
        returns (uint256 count) 
    {
        require(_exists(tokenId), "Credential does not exist");
        
        address[] memory verifiers = getRolemembers(VERIFIER_ROLE);
        for (uint i = 0; i < verifiers.length; i++) {
            if (credentials[tokenId].verifications[verifiers[i]]) {
                count++;
            }
        }
    }

    function isExpired(uint256 tokenId) 
        public 
        view 
        returns (bool) 
    {
        require(_exists(tokenId), "Credential does not exist");
        
        if (credentials[tokenId].expiryDate == 0) {
            return false;  // Non-expiring credential
        }
        
        return block.timestamp > credentials[tokenId].expiryDate;
    }

    function pause() public onlyRole(DEFAULT_ADMIN_ROLE) {
        _pause();
    }

    function unpause() public onlyRole(DEFAULT_ADMIN_ROLE) {
        _unpause();
    }

    // Override required functions
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId,
        uint256 batchSize
    ) internal override(ERC721) whenNotPaused {
        super._beforeTokenTransfer(from, to, tokenId, batchSize);
    }

    function _burn(uint256 tokenId) 
        internal 
        override(ERC721, ERC721URIStorage) 
    {
        super._burn(tokenId);
    }

    function tokenURI(uint256 tokenId)
        public
        view
        override(ERC721, ERC721URIStorage)
        returns (string memory)
    {
        return super.tokenURI(tokenId);
    }

    function supportsInterface(bytes4 interfaceId)
        public
        view
        override(ERC721, AccessControl)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }
}
dentialIssued(tokenId, recipient, credentialType, institution);
        return tokenId;
    }

    function verifyCredential(uint256 tokenId) 
        public 
        onlyRole(VERIFIER_ROLE) 
    {
        require(_exists(tokenId), "Credential does not exist");
        require(!credentials[tokenId].revoked, "Credential has been revoked");
        
        if (credentials[tokenId].expiryDate > 0) {
            require(
                block.timestamp <= credentials[tokenId].expiryDate,
                "Credential has expired"
            );
        }
        
        credentials[tokenId].verifications[msg.sender] = true;
        emit Cre