class MLPipeline {
  constructor() {
    this.preprocessor = new DataPreprocessor();
    this.trainer = new ModelTrainer();
    this.evaluator = new ModelEvaluator();
    this.deployer = new ModelDeployer();
  }

  async train(data, config) {
    const processed = await this.preprocessor.process(data);
    const model = await this.trainer.train(processed, config);
    const evaluation = await this.evaluator.evaluate(model, processed);
    return this.deployer.deploy(model, evaluation);
  }
}

class ModelTrainer {
  constructor() {
    this.optimizer = new HyperparameterOptimizer();
    this.validator = new CrossValidator();
    this.checkpointer = new ModelCheckpointer();
  }

  async train(data, config) {
    const params = await this.optimizer.optimize(data, config);
    const validated = await this.validator.validate(data, params);
    return this.checkpointer.save(validated);
  }
}

class DataPreprocessor {
  constructor() {
    this.cleaner = new DataCleaner();
    this.transformer = new FeatureTransformer();
    this.augmentor = new DataAugmentor();
  }

  async process(data) {
    const cleaned = await this.cleaner.clean(data);
    const transformed = await this.transformer.transform(cleaned);
    return this.augmentor.augment(transformed);
  }
}

class ModelEvaluator {
  constructor() {
    this.metrics = new MetricsCalculator();
    this.validator = new ModelValidator();
    this.reporter = new EvaluationReporter();
  }

  async evaluate(model, data) {
    const metrics = await this.metrics.calculate(model, data);
    const validation = await this.validator.validate(model, metrics);
    return this.reporter.generate(validation);
  }
}

class ModelDeployer {
  constructor() {
    this.containerizer = new ModelContainerizer();
    this.scaler = new AutoScaler();
    this.monitor = new ModelMonitor();
  }

  async deploy(model, evaluation) {
    const container = await this.containerizer.containerize(model);
    const deployment = await this.scaler.deploy(container);
    return this.monitor.monitor(deployment);
  }
}

export default MLPipeline;