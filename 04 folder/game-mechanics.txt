class GameMechanics {
  constructor() {
    this.skills = new SkillSystem();
    this.attributes = new AttributeSystem();
    this.classes = new ClassSystem();
    this.factions = new FactionSystem();
    this.reputation = new ReputationSystem();
    this.economy = new GameEconomy();
  }
}

class SkillSystem {
  constructor() {
    this.progression = new SkillProgression();
    this.trees = new SkillTrees();
    this.specializations = new Specializations();
  }

  async improveSkill(character, skill, experience) {
    const improved = await this.progression.addExperience(character, skill, experience);
    await this.checkUnlocks(character, skill);
    return this.specializations.update(character, skill);
  }

  async learnAbility(character, ability) {
    if (await this.trees.canLearn(character, ability)) {
      await this.progression.unlockAbility(character, ability);
      return this.updateCharacterAbilities(character);
    }
  }
}

class ClassSystem {
  constructor() {
    this.roles = new RoleManager();
    this.abilities = new ClassAbilities();
    this.progression = new ClassProgression();
  }

  async changeClass(character, newClass) {
    await this.validateClassChange(character, newClass);
    await this.transferAbilities(character, newClass);
    return this.roles.updateRole(character, newClass);
  }
}

class FactionSystem {
  constructor() {
    this.alliances = new AllianceManager();
    this.influence = new InfluenceCalculator();
    this.diplomacy = new DiplomacySystem();
  }

  async updateRelations(faction1, faction2, action) {
    const impact = await this.influence.calculateImpact(action);
    await this.alliances.updateStanding(faction1, faction2, impact);
    return this.diplomacy.processChange(faction1, faction2, impact);
  }
}

class GameEconomy {
  constructor() {
    this.market = new MarketSystem();
    this.resources = new ResourceManager();
    this.banking = new BankingSystem();
  }

  async processTransaction(buyer, seller, items, currency) {
    const verified = await this.banking.verifyFunds(buyer, currency);
    if (verified) {
      await this.transferItems(seller, buyer, items);
      return this.banking.transfer(buyer, seller, currency);
    }
  }
}

export default GameMechanics;