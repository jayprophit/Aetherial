class InterfaceSystem {
  constructor() {
    this.ui = new UIManager();
    this.state = new StateManager();
    this.routing = new RouterSystem();
    this.events = new EventManager();
    this.storage = new StorageSystem();
  }

  async initialize() {
    await Promise.all([
      this.ui.init(),
      this.state.init(),
      this.routing.init(),
      this.events.init()
    ]);
  }
}

class UIManager {
  constructor() {
    this.components = new ComponentLibrary();
    this.layout = new LayoutManager();
    this.theme = new ThemeManager();
    this.animation = new AnimationSystem();
    this.interaction = new InteractionHandler();
  }

  async render(component, props) {
    const themed = await this.theme.apply(component);
    const animated = await this.animation.prepare(themed);
    return this.components.render(animated, props);
  }
}

class StateManager {
  constructor() {
    this.store = new DataStore();
    this.actions = new ActionManager();
    this.middleware = new MiddlewareSystem();
    this.persistence = new StatePersistence();
  }

  async dispatch(action) {
    const processed = await this.middleware.process(action);
    const newState = await this.store.update(processed);
    return this.persistence.save(newState);
  }
}

export { InterfaceSystem };